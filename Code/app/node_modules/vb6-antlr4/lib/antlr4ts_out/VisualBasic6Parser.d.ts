import { ATN } from "antlr4ts/atn/ATN";
import { FailedPredicateException } from "antlr4ts/FailedPredicateException";
import { Parser } from "antlr4ts/Parser";
import { ParserRuleContext } from "antlr4ts/ParserRuleContext";
import { RuleContext } from "antlr4ts/RuleContext";
import { TerminalNode } from "antlr4ts/tree/TerminalNode";
import { TokenStream } from "antlr4ts/TokenStream";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VisualBasic6Listener } from "./VisualBasic6Listener";
import { VisualBasic6Visitor } from "./VisualBasic6Visitor";
export declare class VisualBasic6Parser extends Parser {
    static readonly ACCESS = 1;
    static readonly ADDRESSOF = 2;
    static readonly ALIAS = 3;
    static readonly AND = 4;
    static readonly ATTRIBUTE = 5;
    static readonly APPACTIVATE = 6;
    static readonly APPEND = 7;
    static readonly AS = 8;
    static readonly BEEP = 9;
    static readonly BEGIN = 10;
    static readonly BEGINPROPERTY = 11;
    static readonly BINARY = 12;
    static readonly BOOLEAN = 13;
    static readonly BYVAL = 14;
    static readonly BYREF = 15;
    static readonly BYTE = 16;
    static readonly CALL = 17;
    static readonly CASE = 18;
    static readonly CHDIR = 19;
    static readonly CHDRIVE = 20;
    static readonly CLASS = 21;
    static readonly CLOSE = 22;
    static readonly COLLECTION = 23;
    static readonly CONST = 24;
    static readonly DATE = 25;
    static readonly DECLARE = 26;
    static readonly DEFBOOL = 27;
    static readonly DEFBYTE = 28;
    static readonly DEFDATE = 29;
    static readonly DEFDBL = 30;
    static readonly DEFDEC = 31;
    static readonly DEFCUR = 32;
    static readonly DEFINT = 33;
    static readonly DEFLNG = 34;
    static readonly DEFOBJ = 35;
    static readonly DEFSNG = 36;
    static readonly DEFSTR = 37;
    static readonly DEFVAR = 38;
    static readonly DELETESETTING = 39;
    static readonly DIM = 40;
    static readonly DO = 41;
    static readonly DOUBLE = 42;
    static readonly EACH = 43;
    static readonly ELSE = 44;
    static readonly ELSEIF = 45;
    static readonly END_ENUM = 46;
    static readonly END_FUNCTION = 47;
    static readonly END_IF = 48;
    static readonly END_PROPERTY = 49;
    static readonly END_SELECT = 50;
    static readonly END_SUB = 51;
    static readonly END_TYPE = 52;
    static readonly END_WITH = 53;
    static readonly END = 54;
    static readonly ENDPROPERTY = 55;
    static readonly ENUM = 56;
    static readonly EQV = 57;
    static readonly ERASE = 58;
    static readonly ERROR = 59;
    static readonly EVENT = 60;
    static readonly EXIT_DO = 61;
    static readonly EXIT_FOR = 62;
    static readonly EXIT_FUNCTION = 63;
    static readonly EXIT_PROPERTY = 64;
    static readonly EXIT_SUB = 65;
    static readonly FALSE = 66;
    static readonly FILECOPY = 67;
    static readonly FRIEND = 68;
    static readonly FOR = 69;
    static readonly FUNCTION = 70;
    static readonly GET = 71;
    static readonly GLOBAL = 72;
    static readonly GOSUB = 73;
    static readonly GOTO = 74;
    static readonly IF = 75;
    static readonly IMP = 76;
    static readonly IMPLEMENTS = 77;
    static readonly IN = 78;
    static readonly INPUT = 79;
    static readonly IS = 80;
    static readonly INTEGER = 81;
    static readonly KILL = 82;
    static readonly LOAD = 83;
    static readonly LOCK = 84;
    static readonly LONG = 85;
    static readonly LOOP = 86;
    static readonly LEN = 87;
    static readonly LET = 88;
    static readonly LIB = 89;
    static readonly LIKE = 90;
    static readonly LINE_INPUT = 91;
    static readonly LOCK_READ = 92;
    static readonly LOCK_WRITE = 93;
    static readonly LOCK_READ_WRITE = 94;
    static readonly LSET = 95;
    static readonly MACRO_IF = 96;
    static readonly MACRO_ELSEIF = 97;
    static readonly MACRO_ELSE = 98;
    static readonly MACRO_END_IF = 99;
    static readonly ME = 100;
    static readonly MID = 101;
    static readonly MKDIR = 102;
    static readonly MOD = 103;
    static readonly NAME = 104;
    static readonly NEXT = 105;
    static readonly NEW = 106;
    static readonly NOT = 107;
    static readonly NOTHING = 108;
    static readonly NULL = 109;
    static readonly OBJECT = 110;
    static readonly ON = 111;
    static readonly ON_ERROR = 112;
    static readonly ON_LOCAL_ERROR = 113;
    static readonly OPEN = 114;
    static readonly OPTIONAL = 115;
    static readonly OPTION_BASE = 116;
    static readonly OPTION_EXPLICIT = 117;
    static readonly OPTION_COMPARE = 118;
    static readonly OPTION_PRIVATE_MODULE = 119;
    static readonly OR = 120;
    static readonly OUTPUT = 121;
    static readonly PARAMARRAY = 122;
    static readonly PRESERVE = 123;
    static readonly PRINT = 124;
    static readonly PRIVATE = 125;
    static readonly PROPERTY_GET = 126;
    static readonly PROPERTY_LET = 127;
    static readonly PROPERTY_SET = 128;
    static readonly PUBLIC = 129;
    static readonly PUT = 130;
    static readonly RANDOM = 131;
    static readonly RANDOMIZE = 132;
    static readonly RAISEEVENT = 133;
    static readonly READ = 134;
    static readonly READ_WRITE = 135;
    static readonly REDIM = 136;
    static readonly REM = 137;
    static readonly RESET = 138;
    static readonly RESUME = 139;
    static readonly RETURN = 140;
    static readonly RMDIR = 141;
    static readonly RSET = 142;
    static readonly SAVEPICTURE = 143;
    static readonly SAVESETTING = 144;
    static readonly SEEK = 145;
    static readonly SELECT = 146;
    static readonly SENDKEYS = 147;
    static readonly SET = 148;
    static readonly SETATTR = 149;
    static readonly SHARED = 150;
    static readonly SINGLE = 151;
    static readonly SPC = 152;
    static readonly STATIC = 153;
    static readonly STEP = 154;
    static readonly STOP = 155;
    static readonly STRING = 156;
    static readonly SUB = 157;
    static readonly TAB = 158;
    static readonly TEXT = 159;
    static readonly THEN = 160;
    static readonly TIME = 161;
    static readonly TO = 162;
    static readonly TRUE = 163;
    static readonly TYPE = 164;
    static readonly TYPEOF = 165;
    static readonly UNLOAD = 166;
    static readonly UNLOCK = 167;
    static readonly UNTIL = 168;
    static readonly VARIANT = 169;
    static readonly VERSION = 170;
    static readonly WEND = 171;
    static readonly WHILE = 172;
    static readonly WIDTH = 173;
    static readonly WITH = 174;
    static readonly WITHEVENTS = 175;
    static readonly WRITE = 176;
    static readonly XOR = 177;
    static readonly AMPERSAND = 178;
    static readonly ASSIGN = 179;
    static readonly AT = 180;
    static readonly COLON = 181;
    static readonly COMMA = 182;
    static readonly DIV = 183;
    static readonly DOLLAR = 184;
    static readonly DOT = 185;
    static readonly EQ = 186;
    static readonly EXCLAMATIONMARK = 187;
    static readonly GEQ = 188;
    static readonly GT = 189;
    static readonly HASH = 190;
    static readonly LEQ = 191;
    static readonly LBRACE = 192;
    static readonly LPAREN = 193;
    static readonly LT = 194;
    static readonly MINUS = 195;
    static readonly MINUS_EQ = 196;
    static readonly MULT = 197;
    static readonly NEQ = 198;
    static readonly PERCENT = 199;
    static readonly PLUS = 200;
    static readonly PLUS_EQ = 201;
    static readonly POW = 202;
    static readonly RBRACE = 203;
    static readonly RPAREN = 204;
    static readonly SEMICOLON = 205;
    static readonly L_SQUARE_BRACKET = 206;
    static readonly R_SQUARE_BRACKET = 207;
    static readonly STRINGLITERAL = 208;
    static readonly DATELITERAL = 209;
    static readonly COLORLITERAL = 210;
    static readonly INTEGERLITERAL = 211;
    static readonly DOUBLELITERAL = 212;
    static readonly FILENUMBER = 213;
    static readonly OCTALLITERAL = 214;
    static readonly FRX_OFFSET = 215;
    static readonly GUID = 216;
    static readonly IDENTIFIER = 217;
    static readonly LINE_CONTINUATION = 218;
    static readonly NEWLINE = 219;
    static readonly COMMENT = 220;
    static readonly WS = 221;
    static readonly RULE_startRule = 0;
    static readonly RULE_module = 1;
    static readonly RULE_moduleReferences = 2;
    static readonly RULE_moduleReference = 3;
    static readonly RULE_moduleReferenceValue = 4;
    static readonly RULE_moduleReferenceComponent = 5;
    static readonly RULE_moduleHeader = 6;
    static readonly RULE_moduleConfig = 7;
    static readonly RULE_moduleConfigElement = 8;
    static readonly RULE_moduleAttributes = 9;
    static readonly RULE_moduleOptions = 10;
    static readonly RULE_moduleOption = 11;
    static readonly RULE_moduleBody = 12;
    static readonly RULE_moduleBodyElement = 13;
    static readonly RULE_controlProperties = 14;
    static readonly RULE_cp_Properties = 15;
    static readonly RULE_cp_SingleProperty = 16;
    static readonly RULE_cp_PropertyName = 17;
    static readonly RULE_cp_PropertyValue = 18;
    static readonly RULE_cp_NestedProperty = 19;
    static readonly RULE_cp_ControlType = 20;
    static readonly RULE_cp_ControlIdentifier = 21;
    static readonly RULE_moduleBlock = 22;
    static readonly RULE_attributeStmt = 23;
    static readonly RULE_block = 24;
    static readonly RULE_blockStmt = 25;
    static readonly RULE_appActivateStmt = 26;
    static readonly RULE_beepStmt = 27;
    static readonly RULE_chDirStmt = 28;
    static readonly RULE_chDriveStmt = 29;
    static readonly RULE_closeStmt = 30;
    static readonly RULE_constStmt = 31;
    static readonly RULE_constSubStmt = 32;
    static readonly RULE_dateStmt = 33;
    static readonly RULE_declareStmt = 34;
    static readonly RULE_deftypeStmt = 35;
    static readonly RULE_deleteSettingStmt = 36;
    static readonly RULE_doLoopStmt = 37;
    static readonly RULE_endStmt = 38;
    static readonly RULE_enumerationStmt = 39;
    static readonly RULE_enumerationStmt_Constant = 40;
    static readonly RULE_eraseStmt = 41;
    static readonly RULE_errorStmt = 42;
    static readonly RULE_eventStmt = 43;
    static readonly RULE_exitStmt = 44;
    static readonly RULE_filecopyStmt = 45;
    static readonly RULE_forEachStmt = 46;
    static readonly RULE_forNextStmt = 47;
    static readonly RULE_functionStmt = 48;
    static readonly RULE_getStmt = 49;
    static readonly RULE_goSubStmt = 50;
    static readonly RULE_goToStmt = 51;
    static readonly RULE_ifThenElseStmt = 52;
    static readonly RULE_ifBlockStmt = 53;
    static readonly RULE_ifConditionStmt = 54;
    static readonly RULE_ifElseIfBlockStmt = 55;
    static readonly RULE_ifElseBlockStmt = 56;
    static readonly RULE_implementsStmt = 57;
    static readonly RULE_inputStmt = 58;
    static readonly RULE_killStmt = 59;
    static readonly RULE_letStmt = 60;
    static readonly RULE_lineInputStmt = 61;
    static readonly RULE_loadStmt = 62;
    static readonly RULE_lockStmt = 63;
    static readonly RULE_lsetStmt = 64;
    static readonly RULE_macroIfThenElseStmt = 65;
    static readonly RULE_macroIfBlockStmt = 66;
    static readonly RULE_macroElseIfBlockStmt = 67;
    static readonly RULE_macroElseBlockStmt = 68;
    static readonly RULE_midStmt = 69;
    static readonly RULE_mkdirStmt = 70;
    static readonly RULE_nameStmt = 71;
    static readonly RULE_onErrorStmt = 72;
    static readonly RULE_onGoToStmt = 73;
    static readonly RULE_onGoSubStmt = 74;
    static readonly RULE_openStmt = 75;
    static readonly RULE_outputList = 76;
    static readonly RULE_outputList_Expression = 77;
    static readonly RULE_printStmt = 78;
    static readonly RULE_propertyGetStmt = 79;
    static readonly RULE_propertySetStmt = 80;
    static readonly RULE_propertyLetStmt = 81;
    static readonly RULE_putStmt = 82;
    static readonly RULE_raiseEventStmt = 83;
    static readonly RULE_randomizeStmt = 84;
    static readonly RULE_redimStmt = 85;
    static readonly RULE_redimSubStmt = 86;
    static readonly RULE_resetStmt = 87;
    static readonly RULE_resumeStmt = 88;
    static readonly RULE_returnStmt = 89;
    static readonly RULE_rmdirStmt = 90;
    static readonly RULE_rsetStmt = 91;
    static readonly RULE_savepictureStmt = 92;
    static readonly RULE_saveSettingStmt = 93;
    static readonly RULE_seekStmt = 94;
    static readonly RULE_selectCaseStmt = 95;
    static readonly RULE_sC_Case = 96;
    static readonly RULE_sC_Cond = 97;
    static readonly RULE_sC_CondExpr = 98;
    static readonly RULE_sendkeysStmt = 99;
    static readonly RULE_setattrStmt = 100;
    static readonly RULE_setStmt = 101;
    static readonly RULE_stopStmt = 102;
    static readonly RULE_subStmt = 103;
    static readonly RULE_timeStmt = 104;
    static readonly RULE_typeStmt = 105;
    static readonly RULE_typeStmt_Element = 106;
    static readonly RULE_typeOfStmt = 107;
    static readonly RULE_unloadStmt = 108;
    static readonly RULE_unlockStmt = 109;
    static readonly RULE_valueStmt = 110;
    static readonly RULE_variableStmt = 111;
    static readonly RULE_variableListStmt = 112;
    static readonly RULE_variableSubStmt = 113;
    static readonly RULE_whileWendStmt = 114;
    static readonly RULE_widthStmt = 115;
    static readonly RULE_withStmt = 116;
    static readonly RULE_writeStmt = 117;
    static readonly RULE_explicitCallStmt = 118;
    static readonly RULE_eCS_ProcedureCall = 119;
    static readonly RULE_eCS_MemberProcedureCall = 120;
    static readonly RULE_implicitCallStmt_InBlock = 121;
    static readonly RULE_iCS_B_ProcedureCall = 122;
    static readonly RULE_iCS_B_MemberProcedureCall = 123;
    static readonly RULE_implicitCallStmt_InStmt = 124;
    static readonly RULE_iCS_S_VariableOrProcedureCall = 125;
    static readonly RULE_iCS_S_ProcedureOrArrayCall = 126;
    static readonly RULE_iCS_S_NestedProcedureCall = 127;
    static readonly RULE_iCS_S_MembersCall = 128;
    static readonly RULE_iCS_S_MemberCall = 129;
    static readonly RULE_iCS_S_DictionaryCall = 130;
    static readonly RULE_argsCall = 131;
    static readonly RULE_argCall = 132;
    static readonly RULE_dictionaryCallStmt = 133;
    static readonly RULE_argList = 134;
    static readonly RULE_arg = 135;
    static readonly RULE_argDefaultValue = 136;
    static readonly RULE_subscripts = 137;
    static readonly RULE_subscript = 138;
    static readonly RULE_ambiguousIdentifier = 139;
    static readonly RULE_asTypeClause = 140;
    static readonly RULE_baseType = 141;
    static readonly RULE_certainIdentifier = 142;
    static readonly RULE_comparisonOperator = 143;
    static readonly RULE_complexType = 144;
    static readonly RULE_fieldLength = 145;
    static readonly RULE_letterrange = 146;
    static readonly RULE_lineLabel = 147;
    static readonly RULE_literal = 148;
    static readonly RULE_publicPrivateVisibility = 149;
    static readonly RULE_publicPrivateGlobalVisibility = 150;
    static readonly RULE_type = 151;
    static readonly RULE_typeHint = 152;
    static readonly RULE_visibility = 153;
    static readonly RULE_ambiguousKeyword = 154;
    static readonly ruleNames: string[];
    private static readonly _LITERAL_NAMES;
    private static readonly _SYMBOLIC_NAMES;
    static readonly VOCABULARY: Vocabulary;
    get vocabulary(): Vocabulary;
    get grammarFileName(): string;
    get ruleNames(): string[];
    get serializedATN(): string;
    protected createFailedPredicateException(predicate?: string, message?: string): FailedPredicateException;
    constructor(input: TokenStream);
    startRule(): StartRuleContext;
    module(): ModuleContext;
    moduleReferences(): ModuleReferencesContext;
    moduleReference(): ModuleReferenceContext;
    moduleReferenceValue(): ModuleReferenceValueContext;
    moduleReferenceComponent(): ModuleReferenceComponentContext;
    moduleHeader(): ModuleHeaderContext;
    moduleConfig(): ModuleConfigContext;
    moduleConfigElement(): ModuleConfigElementContext;
    moduleAttributes(): ModuleAttributesContext;
    moduleOptions(): ModuleOptionsContext;
    moduleOption(): ModuleOptionContext;
    moduleBody(): ModuleBodyContext;
    moduleBodyElement(): ModuleBodyElementContext;
    controlProperties(): ControlPropertiesContext;
    cp_Properties(): Cp_PropertiesContext;
    cp_SingleProperty(): Cp_SinglePropertyContext;
    cp_PropertyName(): Cp_PropertyNameContext;
    cp_PropertyValue(): Cp_PropertyValueContext;
    cp_NestedProperty(): Cp_NestedPropertyContext;
    cp_ControlType(): Cp_ControlTypeContext;
    cp_ControlIdentifier(): Cp_ControlIdentifierContext;
    moduleBlock(): ModuleBlockContext;
    attributeStmt(): AttributeStmtContext;
    block(): BlockContext;
    blockStmt(): BlockStmtContext;
    appActivateStmt(): AppActivateStmtContext;
    beepStmt(): BeepStmtContext;
    chDirStmt(): ChDirStmtContext;
    chDriveStmt(): ChDriveStmtContext;
    closeStmt(): CloseStmtContext;
    constStmt(): ConstStmtContext;
    constSubStmt(): ConstSubStmtContext;
    dateStmt(): DateStmtContext;
    declareStmt(): DeclareStmtContext;
    deftypeStmt(): DeftypeStmtContext;
    deleteSettingStmt(): DeleteSettingStmtContext;
    doLoopStmt(): DoLoopStmtContext;
    endStmt(): EndStmtContext;
    enumerationStmt(): EnumerationStmtContext;
    enumerationStmt_Constant(): EnumerationStmt_ConstantContext;
    eraseStmt(): EraseStmtContext;
    errorStmt(): ErrorStmtContext;
    eventStmt(): EventStmtContext;
    exitStmt(): ExitStmtContext;
    filecopyStmt(): FilecopyStmtContext;
    forEachStmt(): ForEachStmtContext;
    forNextStmt(): ForNextStmtContext;
    functionStmt(): FunctionStmtContext;
    getStmt(): GetStmtContext;
    goSubStmt(): GoSubStmtContext;
    goToStmt(): GoToStmtContext;
    ifThenElseStmt(): IfThenElseStmtContext;
    ifBlockStmt(): IfBlockStmtContext;
    ifConditionStmt(): IfConditionStmtContext;
    ifElseIfBlockStmt(): IfElseIfBlockStmtContext;
    ifElseBlockStmt(): IfElseBlockStmtContext;
    implementsStmt(): ImplementsStmtContext;
    inputStmt(): InputStmtContext;
    killStmt(): KillStmtContext;
    letStmt(): LetStmtContext;
    lineInputStmt(): LineInputStmtContext;
    loadStmt(): LoadStmtContext;
    lockStmt(): LockStmtContext;
    lsetStmt(): LsetStmtContext;
    macroIfThenElseStmt(): MacroIfThenElseStmtContext;
    macroIfBlockStmt(): MacroIfBlockStmtContext;
    macroElseIfBlockStmt(): MacroElseIfBlockStmtContext;
    macroElseBlockStmt(): MacroElseBlockStmtContext;
    midStmt(): MidStmtContext;
    mkdirStmt(): MkdirStmtContext;
    nameStmt(): NameStmtContext;
    onErrorStmt(): OnErrorStmtContext;
    onGoToStmt(): OnGoToStmtContext;
    onGoSubStmt(): OnGoSubStmtContext;
    openStmt(): OpenStmtContext;
    outputList(): OutputListContext;
    outputList_Expression(): OutputList_ExpressionContext;
    printStmt(): PrintStmtContext;
    propertyGetStmt(): PropertyGetStmtContext;
    propertySetStmt(): PropertySetStmtContext;
    propertyLetStmt(): PropertyLetStmtContext;
    putStmt(): PutStmtContext;
    raiseEventStmt(): RaiseEventStmtContext;
    randomizeStmt(): RandomizeStmtContext;
    redimStmt(): RedimStmtContext;
    redimSubStmt(): RedimSubStmtContext;
    resetStmt(): ResetStmtContext;
    resumeStmt(): ResumeStmtContext;
    returnStmt(): ReturnStmtContext;
    rmdirStmt(): RmdirStmtContext;
    rsetStmt(): RsetStmtContext;
    savepictureStmt(): SavepictureStmtContext;
    saveSettingStmt(): SaveSettingStmtContext;
    seekStmt(): SeekStmtContext;
    selectCaseStmt(): SelectCaseStmtContext;
    sC_Case(): SC_CaseContext;
    sC_Cond(): SC_CondContext;
    sC_CondExpr(): SC_CondExprContext;
    sendkeysStmt(): SendkeysStmtContext;
    setattrStmt(): SetattrStmtContext;
    setStmt(): SetStmtContext;
    stopStmt(): StopStmtContext;
    subStmt(): SubStmtContext;
    timeStmt(): TimeStmtContext;
    typeStmt(): TypeStmtContext;
    typeStmt_Element(): TypeStmt_ElementContext;
    typeOfStmt(): TypeOfStmtContext;
    unloadStmt(): UnloadStmtContext;
    unlockStmt(): UnlockStmtContext;
    valueStmt(): ValueStmtContext;
    valueStmt(_p: number): ValueStmtContext;
    variableStmt(): VariableStmtContext;
    variableListStmt(): VariableListStmtContext;
    variableSubStmt(): VariableSubStmtContext;
    whileWendStmt(): WhileWendStmtContext;
    widthStmt(): WidthStmtContext;
    withStmt(): WithStmtContext;
    writeStmt(): WriteStmtContext;
    explicitCallStmt(): ExplicitCallStmtContext;
    eCS_ProcedureCall(): ECS_ProcedureCallContext;
    eCS_MemberProcedureCall(): ECS_MemberProcedureCallContext;
    implicitCallStmt_InBlock(): ImplicitCallStmt_InBlockContext;
    iCS_B_ProcedureCall(): ICS_B_ProcedureCallContext;
    iCS_B_MemberProcedureCall(): ICS_B_MemberProcedureCallContext;
    implicitCallStmt_InStmt(): ImplicitCallStmt_InStmtContext;
    iCS_S_VariableOrProcedureCall(): ICS_S_VariableOrProcedureCallContext;
    iCS_S_ProcedureOrArrayCall(): ICS_S_ProcedureOrArrayCallContext;
    iCS_S_NestedProcedureCall(): ICS_S_NestedProcedureCallContext;
    iCS_S_MembersCall(): ICS_S_MembersCallContext;
    iCS_S_MemberCall(): ICS_S_MemberCallContext;
    iCS_S_DictionaryCall(): ICS_S_DictionaryCallContext;
    argsCall(): ArgsCallContext;
    argCall(): ArgCallContext;
    dictionaryCallStmt(): DictionaryCallStmtContext;
    argList(): ArgListContext;
    arg(): ArgContext;
    argDefaultValue(): ArgDefaultValueContext;
    subscripts(): SubscriptsContext;
    subscript(): SubscriptContext;
    ambiguousIdentifier(): AmbiguousIdentifierContext;
    asTypeClause(): AsTypeClauseContext;
    baseType(): BaseTypeContext;
    certainIdentifier(): CertainIdentifierContext;
    comparisonOperator(): ComparisonOperatorContext;
    complexType(): ComplexTypeContext;
    fieldLength(): FieldLengthContext;
    letterrange(): LetterrangeContext;
    lineLabel(): LineLabelContext;
    literal(): LiteralContext;
    publicPrivateVisibility(): PublicPrivateVisibilityContext;
    publicPrivateGlobalVisibility(): PublicPrivateGlobalVisibilityContext;
    type(): TypeContext;
    typeHint(): TypeHintContext;
    visibility(): VisibilityContext;
    ambiguousKeyword(): AmbiguousKeywordContext;
    sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean;
    private valueStmt_sempred;
    private static readonly _serializedATNSegments;
    private static readonly _serializedATNSegment0;
    private static readonly _serializedATNSegment1;
    private static readonly _serializedATNSegment2;
    private static readonly _serializedATNSegment3;
    private static readonly _serializedATNSegment4;
    private static readonly _serializedATNSegment5;
    static readonly _serializedATN: string;
    static __ATN: ATN;
    static get _ATN(): ATN;
}
export declare class StartRuleContext extends ParserRuleContext {
    module(): ModuleContext;
    EOF(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class ModuleContext extends ParserRuleContext {
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    NEWLINE(): TerminalNode[];
    NEWLINE(i: number): TerminalNode;
    moduleHeader(): ModuleHeaderContext | undefined;
    moduleReferences(): ModuleReferencesContext | undefined;
    controlProperties(): ControlPropertiesContext | undefined;
    moduleConfig(): ModuleConfigContext | undefined;
    moduleAttributes(): ModuleAttributesContext | undefined;
    moduleOptions(): ModuleOptionsContext | undefined;
    moduleBody(): ModuleBodyContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class ModuleReferencesContext extends ParserRuleContext {
    moduleReference(): ModuleReferenceContext[];
    moduleReference(i: number): ModuleReferenceContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class ModuleReferenceContext extends ParserRuleContext {
    OBJECT(): TerminalNode;
    EQ(): TerminalNode;
    moduleReferenceValue(): ModuleReferenceValueContext;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    SEMICOLON(): TerminalNode | undefined;
    moduleReferenceComponent(): ModuleReferenceComponentContext | undefined;
    NEWLINE(): TerminalNode[];
    NEWLINE(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class ModuleReferenceValueContext extends ParserRuleContext {
    STRINGLITERAL(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class ModuleReferenceComponentContext extends ParserRuleContext {
    STRINGLITERAL(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class ModuleHeaderContext extends ParserRuleContext {
    VERSION(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    DOUBLELITERAL(): TerminalNode;
    CLASS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class ModuleConfigContext extends ParserRuleContext {
    BEGIN(): TerminalNode;
    END(): TerminalNode;
    NEWLINE(): TerminalNode[];
    NEWLINE(i: number): TerminalNode;
    moduleConfigElement(): ModuleConfigElementContext[];
    moduleConfigElement(i: number): ModuleConfigElementContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class ModuleConfigElementContext extends ParserRuleContext {
    ambiguousIdentifier(): AmbiguousIdentifierContext;
    EQ(): TerminalNode;
    literal(): LiteralContext;
    NEWLINE(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class ModuleAttributesContext extends ParserRuleContext {
    attributeStmt(): AttributeStmtContext[];
    attributeStmt(i: number): AttributeStmtContext;
    NEWLINE(): TerminalNode[];
    NEWLINE(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class ModuleOptionsContext extends ParserRuleContext {
    moduleOption(): ModuleOptionContext[];
    moduleOption(i: number): ModuleOptionContext;
    NEWLINE(): TerminalNode[];
    NEWLINE(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class ModuleOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    copyFrom(ctx: ModuleOptionContext): void;
}
export declare class OptionBaseStmtContext extends ModuleOptionContext {
    OPTION_BASE(): TerminalNode;
    WS(): TerminalNode;
    INTEGERLITERAL(): TerminalNode;
    constructor(ctx: ModuleOptionContext);
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class OptionCompareStmtContext extends ModuleOptionContext {
    OPTION_COMPARE(): TerminalNode;
    WS(): TerminalNode;
    BINARY(): TerminalNode | undefined;
    TEXT(): TerminalNode | undefined;
    constructor(ctx: ModuleOptionContext);
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class OptionExplicitStmtContext extends ModuleOptionContext {
    OPTION_EXPLICIT(): TerminalNode;
    constructor(ctx: ModuleOptionContext);
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class OptionPrivateModuleStmtContext extends ModuleOptionContext {
    OPTION_PRIVATE_MODULE(): TerminalNode;
    constructor(ctx: ModuleOptionContext);
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class ModuleBodyContext extends ParserRuleContext {
    moduleBodyElement(): ModuleBodyElementContext[];
    moduleBodyElement(i: number): ModuleBodyElementContext;
    NEWLINE(): TerminalNode[];
    NEWLINE(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class ModuleBodyElementContext extends ParserRuleContext {
    moduleBlock(): ModuleBlockContext | undefined;
    moduleOption(): ModuleOptionContext | undefined;
    declareStmt(): DeclareStmtContext | undefined;
    enumerationStmt(): EnumerationStmtContext | undefined;
    eventStmt(): EventStmtContext | undefined;
    functionStmt(): FunctionStmtContext | undefined;
    macroIfThenElseStmt(): MacroIfThenElseStmtContext | undefined;
    propertyGetStmt(): PropertyGetStmtContext | undefined;
    propertySetStmt(): PropertySetStmtContext | undefined;
    propertyLetStmt(): PropertyLetStmtContext | undefined;
    subStmt(): SubStmtContext | undefined;
    typeStmt(): TypeStmtContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class ControlPropertiesContext extends ParserRuleContext {
    BEGIN(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    cp_ControlType(): Cp_ControlTypeContext;
    cp_ControlIdentifier(): Cp_ControlIdentifierContext;
    END(): TerminalNode;
    NEWLINE(): TerminalNode[];
    NEWLINE(i: number): TerminalNode;
    cp_Properties(): Cp_PropertiesContext[];
    cp_Properties(i: number): Cp_PropertiesContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class Cp_PropertiesContext extends ParserRuleContext {
    cp_SingleProperty(): Cp_SinglePropertyContext | undefined;
    cp_NestedProperty(): Cp_NestedPropertyContext | undefined;
    controlProperties(): ControlPropertiesContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class Cp_SinglePropertyContext extends ParserRuleContext {
    implicitCallStmt_InStmt(): ImplicitCallStmt_InStmtContext;
    EQ(): TerminalNode;
    cp_PropertyValue(): Cp_PropertyValueContext;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    DOLLAR(): TerminalNode | undefined;
    FRX_OFFSET(): TerminalNode | undefined;
    NEWLINE(): TerminalNode[];
    NEWLINE(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class Cp_PropertyNameContext extends ParserRuleContext {
    ambiguousIdentifier(): AmbiguousIdentifierContext[];
    ambiguousIdentifier(i: number): AmbiguousIdentifierContext;
    OBJECT(): TerminalNode | undefined;
    DOT(): TerminalNode[];
    DOT(i: number): TerminalNode;
    LPAREN(): TerminalNode[];
    LPAREN(i: number): TerminalNode;
    literal(): LiteralContext[];
    literal(i: number): LiteralContext;
    RPAREN(): TerminalNode[];
    RPAREN(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class Cp_PropertyValueContext extends ParserRuleContext {
    literal(): LiteralContext | undefined;
    POW(): TerminalNode | undefined;
    ambiguousIdentifier(): AmbiguousIdentifierContext | undefined;
    DOLLAR(): TerminalNode | undefined;
    LBRACE(): TerminalNode | undefined;
    RBRACE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class Cp_NestedPropertyContext extends ParserRuleContext {
    BEGINPROPERTY(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    ambiguousIdentifier(): AmbiguousIdentifierContext;
    ENDPROPERTY(): TerminalNode;
    LPAREN(): TerminalNode | undefined;
    INTEGERLITERAL(): TerminalNode | undefined;
    RPAREN(): TerminalNode | undefined;
    GUID(): TerminalNode | undefined;
    NEWLINE(): TerminalNode[];
    NEWLINE(i: number): TerminalNode;
    cp_Properties(): Cp_PropertiesContext[];
    cp_Properties(i: number): Cp_PropertiesContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class Cp_ControlTypeContext extends ParserRuleContext {
    complexType(): ComplexTypeContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class Cp_ControlIdentifierContext extends ParserRuleContext {
    ambiguousIdentifier(): AmbiguousIdentifierContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class ModuleBlockContext extends ParserRuleContext {
    block(): BlockContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class AttributeStmtContext extends ParserRuleContext {
    ATTRIBUTE(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    implicitCallStmt_InStmt(): ImplicitCallStmt_InStmtContext;
    EQ(): TerminalNode;
    literal(): LiteralContext[];
    literal(i: number): LiteralContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class BlockContext extends ParserRuleContext {
    blockStmt(): BlockStmtContext[];
    blockStmt(i: number): BlockStmtContext;
    NEWLINE(): TerminalNode[];
    NEWLINE(i: number): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class BlockStmtContext extends ParserRuleContext {
    appActivateStmt(): AppActivateStmtContext | undefined;
    attributeStmt(): AttributeStmtContext | undefined;
    beepStmt(): BeepStmtContext | undefined;
    chDirStmt(): ChDirStmtContext | undefined;
    chDriveStmt(): ChDriveStmtContext | undefined;
    closeStmt(): CloseStmtContext | undefined;
    constStmt(): ConstStmtContext | undefined;
    dateStmt(): DateStmtContext | undefined;
    deleteSettingStmt(): DeleteSettingStmtContext | undefined;
    deftypeStmt(): DeftypeStmtContext | undefined;
    doLoopStmt(): DoLoopStmtContext | undefined;
    endStmt(): EndStmtContext | undefined;
    eraseStmt(): EraseStmtContext | undefined;
    errorStmt(): ErrorStmtContext | undefined;
    exitStmt(): ExitStmtContext | undefined;
    explicitCallStmt(): ExplicitCallStmtContext | undefined;
    filecopyStmt(): FilecopyStmtContext | undefined;
    forEachStmt(): ForEachStmtContext | undefined;
    forNextStmt(): ForNextStmtContext | undefined;
    getStmt(): GetStmtContext | undefined;
    goSubStmt(): GoSubStmtContext | undefined;
    goToStmt(): GoToStmtContext | undefined;
    ifThenElseStmt(): IfThenElseStmtContext | undefined;
    implementsStmt(): ImplementsStmtContext | undefined;
    inputStmt(): InputStmtContext | undefined;
    killStmt(): KillStmtContext | undefined;
    letStmt(): LetStmtContext | undefined;
    lineInputStmt(): LineInputStmtContext | undefined;
    lineLabel(): LineLabelContext | undefined;
    loadStmt(): LoadStmtContext | undefined;
    lockStmt(): LockStmtContext | undefined;
    lsetStmt(): LsetStmtContext | undefined;
    macroIfThenElseStmt(): MacroIfThenElseStmtContext | undefined;
    midStmt(): MidStmtContext | undefined;
    mkdirStmt(): MkdirStmtContext | undefined;
    nameStmt(): NameStmtContext | undefined;
    onErrorStmt(): OnErrorStmtContext | undefined;
    onGoToStmt(): OnGoToStmtContext | undefined;
    onGoSubStmt(): OnGoSubStmtContext | undefined;
    openStmt(): OpenStmtContext | undefined;
    printStmt(): PrintStmtContext | undefined;
    putStmt(): PutStmtContext | undefined;
    raiseEventStmt(): RaiseEventStmtContext | undefined;
    randomizeStmt(): RandomizeStmtContext | undefined;
    redimStmt(): RedimStmtContext | undefined;
    resetStmt(): ResetStmtContext | undefined;
    resumeStmt(): ResumeStmtContext | undefined;
    returnStmt(): ReturnStmtContext | undefined;
    rmdirStmt(): RmdirStmtContext | undefined;
    rsetStmt(): RsetStmtContext | undefined;
    savepictureStmt(): SavepictureStmtContext | undefined;
    saveSettingStmt(): SaveSettingStmtContext | undefined;
    seekStmt(): SeekStmtContext | undefined;
    selectCaseStmt(): SelectCaseStmtContext | undefined;
    sendkeysStmt(): SendkeysStmtContext | undefined;
    setattrStmt(): SetattrStmtContext | undefined;
    setStmt(): SetStmtContext | undefined;
    stopStmt(): StopStmtContext | undefined;
    timeStmt(): TimeStmtContext | undefined;
    unloadStmt(): UnloadStmtContext | undefined;
    unlockStmt(): UnlockStmtContext | undefined;
    variableStmt(): VariableStmtContext | undefined;
    whileWendStmt(): WhileWendStmtContext | undefined;
    widthStmt(): WidthStmtContext | undefined;
    withStmt(): WithStmtContext | undefined;
    writeStmt(): WriteStmtContext | undefined;
    implicitCallStmt_InBlock(): ImplicitCallStmt_InBlockContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class AppActivateStmtContext extends ParserRuleContext {
    APPACTIVATE(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    valueStmt(): ValueStmtContext[];
    valueStmt(i: number): ValueStmtContext;
    COMMA(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class BeepStmtContext extends ParserRuleContext {
    BEEP(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class ChDirStmtContext extends ParserRuleContext {
    CHDIR(): TerminalNode;
    WS(): TerminalNode;
    valueStmt(): ValueStmtContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class ChDriveStmtContext extends ParserRuleContext {
    CHDRIVE(): TerminalNode;
    WS(): TerminalNode;
    valueStmt(): ValueStmtContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class CloseStmtContext extends ParserRuleContext {
    CLOSE(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    valueStmt(): ValueStmtContext[];
    valueStmt(i: number): ValueStmtContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class ConstStmtContext extends ParserRuleContext {
    CONST(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    constSubStmt(): ConstSubStmtContext[];
    constSubStmt(i: number): ConstSubStmtContext;
    publicPrivateGlobalVisibility(): PublicPrivateGlobalVisibilityContext | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class ConstSubStmtContext extends ParserRuleContext {
    ambiguousIdentifier(): AmbiguousIdentifierContext;
    EQ(): TerminalNode;
    valueStmt(): ValueStmtContext;
    typeHint(): TypeHintContext | undefined;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    asTypeClause(): AsTypeClauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class DateStmtContext extends ParserRuleContext {
    DATE(): TerminalNode;
    EQ(): TerminalNode;
    valueStmt(): ValueStmtContext;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class DeclareStmtContext extends ParserRuleContext {
    DECLARE(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    ambiguousIdentifier(): AmbiguousIdentifierContext;
    LIB(): TerminalNode;
    STRINGLITERAL(): TerminalNode[];
    STRINGLITERAL(i: number): TerminalNode;
    FUNCTION(): TerminalNode | undefined;
    SUB(): TerminalNode | undefined;
    visibility(): VisibilityContext | undefined;
    typeHint(): TypeHintContext[];
    typeHint(i: number): TypeHintContext;
    ALIAS(): TerminalNode | undefined;
    argList(): ArgListContext | undefined;
    asTypeClause(): AsTypeClauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class DeftypeStmtContext extends ParserRuleContext {
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    letterrange(): LetterrangeContext[];
    letterrange(i: number): LetterrangeContext;
    DEFBOOL(): TerminalNode | undefined;
    DEFBYTE(): TerminalNode | undefined;
    DEFINT(): TerminalNode | undefined;
    DEFLNG(): TerminalNode | undefined;
    DEFCUR(): TerminalNode | undefined;
    DEFSNG(): TerminalNode | undefined;
    DEFDBL(): TerminalNode | undefined;
    DEFDEC(): TerminalNode | undefined;
    DEFDATE(): TerminalNode | undefined;
    DEFSTR(): TerminalNode | undefined;
    DEFOBJ(): TerminalNode | undefined;
    DEFVAR(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class DeleteSettingStmtContext extends ParserRuleContext {
    DELETESETTING(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    valueStmt(): ValueStmtContext[];
    valueStmt(i: number): ValueStmtContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class DoLoopStmtContext extends ParserRuleContext {
    DO(): TerminalNode;
    LOOP(): TerminalNode;
    NEWLINE(): TerminalNode[];
    NEWLINE(i: number): TerminalNode;
    block(): BlockContext | undefined;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    valueStmt(): ValueStmtContext | undefined;
    WHILE(): TerminalNode | undefined;
    UNTIL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class EndStmtContext extends ParserRuleContext {
    END(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class EnumerationStmtContext extends ParserRuleContext {
    ENUM(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    ambiguousIdentifier(): AmbiguousIdentifierContext;
    END_ENUM(): TerminalNode;
    publicPrivateVisibility(): PublicPrivateVisibilityContext | undefined;
    NEWLINE(): TerminalNode[];
    NEWLINE(i: number): TerminalNode;
    enumerationStmt_Constant(): EnumerationStmt_ConstantContext[];
    enumerationStmt_Constant(i: number): EnumerationStmt_ConstantContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class EnumerationStmt_ConstantContext extends ParserRuleContext {
    ambiguousIdentifier(): AmbiguousIdentifierContext;
    EQ(): TerminalNode | undefined;
    valueStmt(): ValueStmtContext | undefined;
    NEWLINE(): TerminalNode[];
    NEWLINE(i: number): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class EraseStmtContext extends ParserRuleContext {
    ERASE(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    valueStmt(): ValueStmtContext[];
    valueStmt(i: number): ValueStmtContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class ErrorStmtContext extends ParserRuleContext {
    ERROR(): TerminalNode;
    WS(): TerminalNode;
    valueStmt(): ValueStmtContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class EventStmtContext extends ParserRuleContext {
    EVENT(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    ambiguousIdentifier(): AmbiguousIdentifierContext;
    argList(): ArgListContext;
    visibility(): VisibilityContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class ExitStmtContext extends ParserRuleContext {
    EXIT_DO(): TerminalNode | undefined;
    EXIT_FOR(): TerminalNode | undefined;
    EXIT_FUNCTION(): TerminalNode | undefined;
    EXIT_PROPERTY(): TerminalNode | undefined;
    EXIT_SUB(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class FilecopyStmtContext extends ParserRuleContext {
    FILECOPY(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    valueStmt(): ValueStmtContext[];
    valueStmt(i: number): ValueStmtContext;
    COMMA(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class ForEachStmtContext extends ParserRuleContext {
    FOR(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    EACH(): TerminalNode;
    ambiguousIdentifier(): AmbiguousIdentifierContext[];
    ambiguousIdentifier(i: number): AmbiguousIdentifierContext;
    IN(): TerminalNode;
    valueStmt(): ValueStmtContext;
    NEXT(): TerminalNode;
    typeHint(): TypeHintContext | undefined;
    NEWLINE(): TerminalNode[];
    NEWLINE(i: number): TerminalNode;
    block(): BlockContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class ForNextStmtContext extends ParserRuleContext {
    FOR(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    iCS_S_VariableOrProcedureCall(): ICS_S_VariableOrProcedureCallContext;
    EQ(): TerminalNode;
    valueStmt(): ValueStmtContext[];
    valueStmt(i: number): ValueStmtContext;
    TO(): TerminalNode;
    NEXT(): TerminalNode;
    typeHint(): TypeHintContext[];
    typeHint(i: number): TypeHintContext;
    asTypeClause(): AsTypeClauseContext | undefined;
    STEP(): TerminalNode | undefined;
    NEWLINE(): TerminalNode[];
    NEWLINE(i: number): TerminalNode;
    block(): BlockContext | undefined;
    ambiguousIdentifier(): AmbiguousIdentifierContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class FunctionStmtContext extends ParserRuleContext {
    FUNCTION(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    ambiguousIdentifier(): AmbiguousIdentifierContext;
    END_FUNCTION(): TerminalNode;
    visibility(): VisibilityContext | undefined;
    STATIC(): TerminalNode | undefined;
    argList(): ArgListContext | undefined;
    asTypeClause(): AsTypeClauseContext | undefined;
    NEWLINE(): TerminalNode[];
    NEWLINE(i: number): TerminalNode;
    block(): BlockContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class GetStmtContext extends ParserRuleContext {
    GET(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    valueStmt(): ValueStmtContext[];
    valueStmt(i: number): ValueStmtContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class GoSubStmtContext extends ParserRuleContext {
    GOSUB(): TerminalNode;
    WS(): TerminalNode;
    valueStmt(): ValueStmtContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class GoToStmtContext extends ParserRuleContext {
    GOTO(): TerminalNode;
    WS(): TerminalNode;
    valueStmt(): ValueStmtContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class IfThenElseStmtContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    copyFrom(ctx: IfThenElseStmtContext): void;
}
export declare class InlineIfThenElseContext extends IfThenElseStmtContext {
    IF(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    ifConditionStmt(): IfConditionStmtContext;
    THEN(): TerminalNode;
    blockStmt(): BlockStmtContext[];
    blockStmt(i: number): BlockStmtContext;
    ELSE(): TerminalNode | undefined;
    constructor(ctx: IfThenElseStmtContext);
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class BlockIfThenElseContext extends IfThenElseStmtContext {
    ifBlockStmt(): IfBlockStmtContext;
    END_IF(): TerminalNode;
    ifElseIfBlockStmt(): IfElseIfBlockStmtContext[];
    ifElseIfBlockStmt(i: number): IfElseIfBlockStmtContext;
    ifElseBlockStmt(): IfElseBlockStmtContext | undefined;
    constructor(ctx: IfThenElseStmtContext);
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class IfBlockStmtContext extends ParserRuleContext {
    IF(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    ifConditionStmt(): IfConditionStmtContext;
    THEN(): TerminalNode;
    NEWLINE(): TerminalNode[];
    NEWLINE(i: number): TerminalNode;
    block(): BlockContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class IfConditionStmtContext extends ParserRuleContext {
    valueStmt(): ValueStmtContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class IfElseIfBlockStmtContext extends ParserRuleContext {
    ELSEIF(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    ifConditionStmt(): IfConditionStmtContext;
    THEN(): TerminalNode;
    NEWLINE(): TerminalNode[];
    NEWLINE(i: number): TerminalNode;
    block(): BlockContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class IfElseBlockStmtContext extends ParserRuleContext {
    ELSE(): TerminalNode;
    NEWLINE(): TerminalNode[];
    NEWLINE(i: number): TerminalNode;
    block(): BlockContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class ImplementsStmtContext extends ParserRuleContext {
    IMPLEMENTS(): TerminalNode;
    WS(): TerminalNode;
    ambiguousIdentifier(): AmbiguousIdentifierContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class InputStmtContext extends ParserRuleContext {
    INPUT(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    valueStmt(): ValueStmtContext[];
    valueStmt(i: number): ValueStmtContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class KillStmtContext extends ParserRuleContext {
    KILL(): TerminalNode;
    WS(): TerminalNode;
    valueStmt(): ValueStmtContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class LetStmtContext extends ParserRuleContext {
    implicitCallStmt_InStmt(): ImplicitCallStmt_InStmtContext;
    valueStmt(): ValueStmtContext;
    EQ(): TerminalNode | undefined;
    PLUS_EQ(): TerminalNode | undefined;
    MINUS_EQ(): TerminalNode | undefined;
    LET(): TerminalNode | undefined;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class LineInputStmtContext extends ParserRuleContext {
    LINE_INPUT(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    valueStmt(): ValueStmtContext[];
    valueStmt(i: number): ValueStmtContext;
    COMMA(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class LoadStmtContext extends ParserRuleContext {
    LOAD(): TerminalNode;
    WS(): TerminalNode;
    valueStmt(): ValueStmtContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class LockStmtContext extends ParserRuleContext {
    LOCK(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    valueStmt(): ValueStmtContext[];
    valueStmt(i: number): ValueStmtContext;
    COMMA(): TerminalNode | undefined;
    TO(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class LsetStmtContext extends ParserRuleContext {
    LSET(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    implicitCallStmt_InStmt(): ImplicitCallStmt_InStmtContext;
    EQ(): TerminalNode;
    valueStmt(): ValueStmtContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class MacroIfThenElseStmtContext extends ParserRuleContext {
    macroIfBlockStmt(): MacroIfBlockStmtContext;
    MACRO_END_IF(): TerminalNode;
    macroElseIfBlockStmt(): MacroElseIfBlockStmtContext[];
    macroElseIfBlockStmt(i: number): MacroElseIfBlockStmtContext;
    macroElseBlockStmt(): MacroElseBlockStmtContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class MacroIfBlockStmtContext extends ParserRuleContext {
    MACRO_IF(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    ifConditionStmt(): IfConditionStmtContext;
    THEN(): TerminalNode;
    NEWLINE(): TerminalNode[];
    NEWLINE(i: number): TerminalNode;
    moduleBody(): ModuleBodyContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class MacroElseIfBlockStmtContext extends ParserRuleContext {
    MACRO_ELSEIF(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    ifConditionStmt(): IfConditionStmtContext;
    THEN(): TerminalNode;
    NEWLINE(): TerminalNode[];
    NEWLINE(i: number): TerminalNode;
    moduleBody(): ModuleBodyContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class MacroElseBlockStmtContext extends ParserRuleContext {
    MACRO_ELSE(): TerminalNode;
    NEWLINE(): TerminalNode[];
    NEWLINE(i: number): TerminalNode;
    moduleBody(): ModuleBodyContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class MidStmtContext extends ParserRuleContext {
    MID(): TerminalNode;
    LPAREN(): TerminalNode;
    argsCall(): ArgsCallContext;
    RPAREN(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class MkdirStmtContext extends ParserRuleContext {
    MKDIR(): TerminalNode;
    WS(): TerminalNode;
    valueStmt(): ValueStmtContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class NameStmtContext extends ParserRuleContext {
    NAME(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    valueStmt(): ValueStmtContext[];
    valueStmt(i: number): ValueStmtContext;
    AS(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class OnErrorStmtContext extends ParserRuleContext {
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    ON_ERROR(): TerminalNode | undefined;
    ON_LOCAL_ERROR(): TerminalNode | undefined;
    GOTO(): TerminalNode | undefined;
    valueStmt(): ValueStmtContext | undefined;
    RESUME(): TerminalNode | undefined;
    NEXT(): TerminalNode | undefined;
    COLON(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class OnGoToStmtContext extends ParserRuleContext {
    ON(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    valueStmt(): ValueStmtContext[];
    valueStmt(i: number): ValueStmtContext;
    GOTO(): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class OnGoSubStmtContext extends ParserRuleContext {
    ON(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    valueStmt(): ValueStmtContext[];
    valueStmt(i: number): ValueStmtContext;
    GOSUB(): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class OpenStmtContext extends ParserRuleContext {
    OPEN(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    valueStmt(): ValueStmtContext[];
    valueStmt(i: number): ValueStmtContext;
    FOR(): TerminalNode;
    AS(): TerminalNode;
    APPEND(): TerminalNode | undefined;
    BINARY(): TerminalNode | undefined;
    INPUT(): TerminalNode | undefined;
    OUTPUT(): TerminalNode | undefined;
    RANDOM(): TerminalNode | undefined;
    ACCESS(): TerminalNode | undefined;
    LEN(): TerminalNode | undefined;
    EQ(): TerminalNode | undefined;
    READ(): TerminalNode | undefined;
    WRITE(): TerminalNode | undefined;
    READ_WRITE(): TerminalNode | undefined;
    SHARED(): TerminalNode | undefined;
    LOCK_READ(): TerminalNode | undefined;
    LOCK_WRITE(): TerminalNode | undefined;
    LOCK_READ_WRITE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class OutputListContext extends ParserRuleContext {
    outputList_Expression(): OutputList_ExpressionContext[];
    outputList_Expression(i: number): OutputList_ExpressionContext;
    SEMICOLON(): TerminalNode[];
    SEMICOLON(i: number): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class OutputList_ExpressionContext extends ParserRuleContext {
    SPC(): TerminalNode | undefined;
    TAB(): TerminalNode | undefined;
    LPAREN(): TerminalNode | undefined;
    argsCall(): ArgsCallContext | undefined;
    RPAREN(): TerminalNode | undefined;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    valueStmt(): ValueStmtContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class PrintStmtContext extends ParserRuleContext {
    PRINT(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    valueStmt(): ValueStmtContext;
    COMMA(): TerminalNode;
    outputList(): OutputListContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class PropertyGetStmtContext extends ParserRuleContext {
    PROPERTY_GET(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    ambiguousIdentifier(): AmbiguousIdentifierContext;
    END_PROPERTY(): TerminalNode;
    visibility(): VisibilityContext | undefined;
    STATIC(): TerminalNode | undefined;
    typeHint(): TypeHintContext | undefined;
    argList(): ArgListContext | undefined;
    asTypeClause(): AsTypeClauseContext | undefined;
    NEWLINE(): TerminalNode[];
    NEWLINE(i: number): TerminalNode;
    block(): BlockContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class PropertySetStmtContext extends ParserRuleContext {
    PROPERTY_SET(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    ambiguousIdentifier(): AmbiguousIdentifierContext;
    END_PROPERTY(): TerminalNode;
    visibility(): VisibilityContext | undefined;
    STATIC(): TerminalNode | undefined;
    argList(): ArgListContext | undefined;
    NEWLINE(): TerminalNode[];
    NEWLINE(i: number): TerminalNode;
    block(): BlockContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class PropertyLetStmtContext extends ParserRuleContext {
    PROPERTY_LET(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    ambiguousIdentifier(): AmbiguousIdentifierContext;
    END_PROPERTY(): TerminalNode;
    visibility(): VisibilityContext | undefined;
    STATIC(): TerminalNode | undefined;
    argList(): ArgListContext | undefined;
    NEWLINE(): TerminalNode[];
    NEWLINE(i: number): TerminalNode;
    block(): BlockContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class PutStmtContext extends ParserRuleContext {
    PUT(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    valueStmt(): ValueStmtContext[];
    valueStmt(i: number): ValueStmtContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class RaiseEventStmtContext extends ParserRuleContext {
    RAISEEVENT(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    ambiguousIdentifier(): AmbiguousIdentifierContext;
    LPAREN(): TerminalNode | undefined;
    RPAREN(): TerminalNode | undefined;
    argsCall(): ArgsCallContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class RandomizeStmtContext extends ParserRuleContext {
    RANDOMIZE(): TerminalNode;
    WS(): TerminalNode | undefined;
    valueStmt(): ValueStmtContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class RedimStmtContext extends ParserRuleContext {
    REDIM(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    redimSubStmt(): RedimSubStmtContext[];
    redimSubStmt(i: number): RedimSubStmtContext;
    PRESERVE(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class RedimSubStmtContext extends ParserRuleContext {
    implicitCallStmt_InStmt(): ImplicitCallStmt_InStmtContext;
    LPAREN(): TerminalNode;
    subscripts(): SubscriptsContext;
    RPAREN(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    asTypeClause(): AsTypeClauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class ResetStmtContext extends ParserRuleContext {
    RESET(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class ResumeStmtContext extends ParserRuleContext {
    RESUME(): TerminalNode;
    WS(): TerminalNode | undefined;
    NEXT(): TerminalNode | undefined;
    ambiguousIdentifier(): AmbiguousIdentifierContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class ReturnStmtContext extends ParserRuleContext {
    RETURN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class RmdirStmtContext extends ParserRuleContext {
    RMDIR(): TerminalNode;
    WS(): TerminalNode;
    valueStmt(): ValueStmtContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class RsetStmtContext extends ParserRuleContext {
    RSET(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    implicitCallStmt_InStmt(): ImplicitCallStmt_InStmtContext;
    EQ(): TerminalNode;
    valueStmt(): ValueStmtContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class SavepictureStmtContext extends ParserRuleContext {
    SAVEPICTURE(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    valueStmt(): ValueStmtContext[];
    valueStmt(i: number): ValueStmtContext;
    COMMA(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class SaveSettingStmtContext extends ParserRuleContext {
    SAVESETTING(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    valueStmt(): ValueStmtContext[];
    valueStmt(i: number): ValueStmtContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class SeekStmtContext extends ParserRuleContext {
    SEEK(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    valueStmt(): ValueStmtContext[];
    valueStmt(i: number): ValueStmtContext;
    COMMA(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class SelectCaseStmtContext extends ParserRuleContext {
    SELECT(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    CASE(): TerminalNode;
    valueStmt(): ValueStmtContext;
    END_SELECT(): TerminalNode;
    NEWLINE(): TerminalNode[];
    NEWLINE(i: number): TerminalNode;
    sC_Case(): SC_CaseContext[];
    sC_Case(i: number): SC_CaseContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class SC_CaseContext extends ParserRuleContext {
    CASE(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    sC_Cond(): SC_CondContext;
    block(): BlockContext | undefined;
    COLON(): TerminalNode | undefined;
    NEWLINE(): TerminalNode[];
    NEWLINE(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class SC_CondContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    copyFrom(ctx: SC_CondContext): void;
}
export declare class CaseCondElseContext extends SC_CondContext {
    ELSE(): TerminalNode;
    constructor(ctx: SC_CondContext);
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class CaseCondExprContext extends SC_CondContext {
    sC_CondExpr(): SC_CondExprContext[];
    sC_CondExpr(i: number): SC_CondExprContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    constructor(ctx: SC_CondContext);
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class SC_CondExprContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    copyFrom(ctx: SC_CondExprContext): void;
}
export declare class CaseCondExprIsContext extends SC_CondExprContext {
    IS(): TerminalNode;
    comparisonOperator(): ComparisonOperatorContext;
    valueStmt(): ValueStmtContext;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    constructor(ctx: SC_CondExprContext);
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class CaseCondExprValueContext extends SC_CondExprContext {
    valueStmt(): ValueStmtContext;
    constructor(ctx: SC_CondExprContext);
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class CaseCondExprToContext extends SC_CondExprContext {
    valueStmt(): ValueStmtContext[];
    valueStmt(i: number): ValueStmtContext;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    TO(): TerminalNode;
    constructor(ctx: SC_CondExprContext);
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class SendkeysStmtContext extends ParserRuleContext {
    SENDKEYS(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    valueStmt(): ValueStmtContext[];
    valueStmt(i: number): ValueStmtContext;
    COMMA(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class SetattrStmtContext extends ParserRuleContext {
    SETATTR(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    valueStmt(): ValueStmtContext[];
    valueStmt(i: number): ValueStmtContext;
    COMMA(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class SetStmtContext extends ParserRuleContext {
    SET(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    implicitCallStmt_InStmt(): ImplicitCallStmt_InStmtContext;
    EQ(): TerminalNode;
    valueStmt(): ValueStmtContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class StopStmtContext extends ParserRuleContext {
    STOP(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class SubStmtContext extends ParserRuleContext {
    SUB(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    ambiguousIdentifier(): AmbiguousIdentifierContext;
    END_SUB(): TerminalNode;
    visibility(): VisibilityContext | undefined;
    STATIC(): TerminalNode | undefined;
    argList(): ArgListContext | undefined;
    NEWLINE(): TerminalNode[];
    NEWLINE(i: number): TerminalNode;
    block(): BlockContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class TimeStmtContext extends ParserRuleContext {
    TIME(): TerminalNode;
    EQ(): TerminalNode;
    valueStmt(): ValueStmtContext;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class TypeStmtContext extends ParserRuleContext {
    TYPE(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    ambiguousIdentifier(): AmbiguousIdentifierContext;
    END_TYPE(): TerminalNode;
    visibility(): VisibilityContext | undefined;
    NEWLINE(): TerminalNode[];
    NEWLINE(i: number): TerminalNode;
    typeStmt_Element(): TypeStmt_ElementContext[];
    typeStmt_Element(i: number): TypeStmt_ElementContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class TypeStmt_ElementContext extends ParserRuleContext {
    ambiguousIdentifier(): AmbiguousIdentifierContext;
    LPAREN(): TerminalNode | undefined;
    RPAREN(): TerminalNode | undefined;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    asTypeClause(): AsTypeClauseContext | undefined;
    NEWLINE(): TerminalNode[];
    NEWLINE(i: number): TerminalNode;
    subscripts(): SubscriptsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class TypeOfStmtContext extends ParserRuleContext {
    TYPEOF(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    valueStmt(): ValueStmtContext;
    IS(): TerminalNode | undefined;
    type(): TypeContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class UnloadStmtContext extends ParserRuleContext {
    UNLOAD(): TerminalNode;
    WS(): TerminalNode;
    valueStmt(): ValueStmtContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class UnlockStmtContext extends ParserRuleContext {
    UNLOCK(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    valueStmt(): ValueStmtContext[];
    valueStmt(i: number): ValueStmtContext;
    COMMA(): TerminalNode | undefined;
    TO(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class ValueStmtContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    copyFrom(ctx: ValueStmtContext): void;
}
export declare class VsLiteralContext extends ValueStmtContext {
    literal(): LiteralContext;
    constructor(ctx: ValueStmtContext);
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class VsStructContext extends ValueStmtContext {
    LPAREN(): TerminalNode;
    valueStmt(): ValueStmtContext[];
    valueStmt(i: number): ValueStmtContext;
    RPAREN(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(ctx: ValueStmtContext);
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class VsNewContext extends ValueStmtContext {
    NEW(): TerminalNode;
    WS(): TerminalNode;
    valueStmt(): ValueStmtContext;
    constructor(ctx: ValueStmtContext);
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class VsTypeOfContext extends ValueStmtContext {
    typeOfStmt(): TypeOfStmtContext;
    constructor(ctx: ValueStmtContext);
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class VsAddressOfContext extends ValueStmtContext {
    ADDRESSOF(): TerminalNode;
    WS(): TerminalNode;
    valueStmt(): ValueStmtContext;
    constructor(ctx: ValueStmtContext);
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class VsAssignContext extends ValueStmtContext {
    implicitCallStmt_InStmt(): ImplicitCallStmt_InStmtContext;
    ASSIGN(): TerminalNode;
    valueStmt(): ValueStmtContext;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    constructor(ctx: ValueStmtContext);
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class VsPowContext extends ValueStmtContext {
    valueStmt(): ValueStmtContext[];
    valueStmt(i: number): ValueStmtContext;
    POW(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    constructor(ctx: ValueStmtContext);
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class VsNegationContext extends ValueStmtContext {
    MINUS(): TerminalNode;
    valueStmt(): ValueStmtContext;
    WS(): TerminalNode | undefined;
    constructor(ctx: ValueStmtContext);
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class VsPlusContext extends ValueStmtContext {
    PLUS(): TerminalNode;
    valueStmt(): ValueStmtContext;
    WS(): TerminalNode | undefined;
    constructor(ctx: ValueStmtContext);
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class VsDivContext extends ValueStmtContext {
    valueStmt(): ValueStmtContext[];
    valueStmt(i: number): ValueStmtContext;
    DIV(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    constructor(ctx: ValueStmtContext);
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class VsMultContext extends ValueStmtContext {
    valueStmt(): ValueStmtContext[];
    valueStmt(i: number): ValueStmtContext;
    MULT(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    constructor(ctx: ValueStmtContext);
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class VsModContext extends ValueStmtContext {
    valueStmt(): ValueStmtContext[];
    valueStmt(i: number): ValueStmtContext;
    MOD(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    constructor(ctx: ValueStmtContext);
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class VsAddContext extends ValueStmtContext {
    valueStmt(): ValueStmtContext[];
    valueStmt(i: number): ValueStmtContext;
    PLUS(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    constructor(ctx: ValueStmtContext);
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class VsMinusContext extends ValueStmtContext {
    valueStmt(): ValueStmtContext[];
    valueStmt(i: number): ValueStmtContext;
    MINUS(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    constructor(ctx: ValueStmtContext);
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class VsAmpContext extends ValueStmtContext {
    valueStmt(): ValueStmtContext[];
    valueStmt(i: number): ValueStmtContext;
    AMPERSAND(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    constructor(ctx: ValueStmtContext);
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class VsEqContext extends ValueStmtContext {
    valueStmt(): ValueStmtContext[];
    valueStmt(i: number): ValueStmtContext;
    EQ(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    constructor(ctx: ValueStmtContext);
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class VsNeqContext extends ValueStmtContext {
    valueStmt(): ValueStmtContext[];
    valueStmt(i: number): ValueStmtContext;
    NEQ(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    constructor(ctx: ValueStmtContext);
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class VsLtContext extends ValueStmtContext {
    valueStmt(): ValueStmtContext[];
    valueStmt(i: number): ValueStmtContext;
    LT(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    constructor(ctx: ValueStmtContext);
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class VsGtContext extends ValueStmtContext {
    valueStmt(): ValueStmtContext[];
    valueStmt(i: number): ValueStmtContext;
    GT(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    constructor(ctx: ValueStmtContext);
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class VsLeqContext extends ValueStmtContext {
    valueStmt(): ValueStmtContext[];
    valueStmt(i: number): ValueStmtContext;
    LEQ(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    constructor(ctx: ValueStmtContext);
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class VsGeqContext extends ValueStmtContext {
    valueStmt(): ValueStmtContext[];
    valueStmt(i: number): ValueStmtContext;
    GEQ(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    constructor(ctx: ValueStmtContext);
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class VsLikeContext extends ValueStmtContext {
    valueStmt(): ValueStmtContext[];
    valueStmt(i: number): ValueStmtContext;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    LIKE(): TerminalNode;
    constructor(ctx: ValueStmtContext);
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class VsIsContext extends ValueStmtContext {
    valueStmt(): ValueStmtContext[];
    valueStmt(i: number): ValueStmtContext;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    IS(): TerminalNode;
    constructor(ctx: ValueStmtContext);
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class VsNotContext extends ValueStmtContext {
    NOT(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    valueStmt(): ValueStmtContext | undefined;
    LPAREN(): TerminalNode | undefined;
    RPAREN(): TerminalNode | undefined;
    constructor(ctx: ValueStmtContext);
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class VsAndContext extends ValueStmtContext {
    valueStmt(): ValueStmtContext[];
    valueStmt(i: number): ValueStmtContext;
    AND(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    constructor(ctx: ValueStmtContext);
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class VsOrContext extends ValueStmtContext {
    valueStmt(): ValueStmtContext[];
    valueStmt(i: number): ValueStmtContext;
    OR(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    constructor(ctx: ValueStmtContext);
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class VsXorContext extends ValueStmtContext {
    valueStmt(): ValueStmtContext[];
    valueStmt(i: number): ValueStmtContext;
    XOR(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    constructor(ctx: ValueStmtContext);
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class VsEqvContext extends ValueStmtContext {
    valueStmt(): ValueStmtContext[];
    valueStmt(i: number): ValueStmtContext;
    EQV(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    constructor(ctx: ValueStmtContext);
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class VsImpContext extends ValueStmtContext {
    valueStmt(): ValueStmtContext[];
    valueStmt(i: number): ValueStmtContext;
    IMP(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    constructor(ctx: ValueStmtContext);
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class VsICSContext extends ValueStmtContext {
    implicitCallStmt_InStmt(): ImplicitCallStmt_InStmtContext;
    constructor(ctx: ValueStmtContext);
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class VsMidContext extends ValueStmtContext {
    midStmt(): MidStmtContext;
    constructor(ctx: ValueStmtContext);
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class VariableStmtContext extends ParserRuleContext {
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    variableListStmt(): VariableListStmtContext;
    DIM(): TerminalNode | undefined;
    STATIC(): TerminalNode | undefined;
    visibility(): VisibilityContext | undefined;
    WITHEVENTS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class VariableListStmtContext extends ParserRuleContext {
    variableSubStmt(): VariableSubStmtContext[];
    variableSubStmt(i: number): VariableSubStmtContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class VariableSubStmtContext extends ParserRuleContext {
    ambiguousIdentifier(): AmbiguousIdentifierContext;
    typeHint(): TypeHintContext | undefined;
    LPAREN(): TerminalNode | undefined;
    RPAREN(): TerminalNode | undefined;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    asTypeClause(): AsTypeClauseContext | undefined;
    subscripts(): SubscriptsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class WhileWendStmtContext extends ParserRuleContext {
    WHILE(): TerminalNode;
    WS(): TerminalNode;
    valueStmt(): ValueStmtContext;
    WEND(): TerminalNode;
    NEWLINE(): TerminalNode[];
    NEWLINE(i: number): TerminalNode;
    block(): BlockContext[];
    block(i: number): BlockContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class WidthStmtContext extends ParserRuleContext {
    WIDTH(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    valueStmt(): ValueStmtContext[];
    valueStmt(i: number): ValueStmtContext;
    COMMA(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class WithStmtContext extends ParserRuleContext {
    WITH(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    implicitCallStmt_InStmt(): ImplicitCallStmt_InStmtContext;
    END_WITH(): TerminalNode;
    NEW(): TerminalNode | undefined;
    NEWLINE(): TerminalNode[];
    NEWLINE(i: number): TerminalNode;
    block(): BlockContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class WriteStmtContext extends ParserRuleContext {
    WRITE(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    valueStmt(): ValueStmtContext;
    COMMA(): TerminalNode;
    outputList(): OutputListContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class ExplicitCallStmtContext extends ParserRuleContext {
    eCS_ProcedureCall(): ECS_ProcedureCallContext | undefined;
    eCS_MemberProcedureCall(): ECS_MemberProcedureCallContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class ECS_ProcedureCallContext extends ParserRuleContext {
    CALL(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    ambiguousIdentifier(): AmbiguousIdentifierContext;
    typeHint(): TypeHintContext | undefined;
    LPAREN(): TerminalNode | undefined;
    argsCall(): ArgsCallContext | undefined;
    RPAREN(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class ECS_MemberProcedureCallContext extends ParserRuleContext {
    CALL(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    DOT(): TerminalNode;
    ambiguousIdentifier(): AmbiguousIdentifierContext;
    implicitCallStmt_InStmt(): ImplicitCallStmt_InStmtContext | undefined;
    typeHint(): TypeHintContext | undefined;
    LPAREN(): TerminalNode | undefined;
    argsCall(): ArgsCallContext | undefined;
    RPAREN(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class ImplicitCallStmt_InBlockContext extends ParserRuleContext {
    iCS_B_ProcedureCall(): ICS_B_ProcedureCallContext | undefined;
    iCS_B_MemberProcedureCall(): ICS_B_MemberProcedureCallContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class ICS_B_ProcedureCallContext extends ParserRuleContext {
    certainIdentifier(): CertainIdentifierContext;
    WS(): TerminalNode | undefined;
    argsCall(): ArgsCallContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class ICS_B_MemberProcedureCallContext extends ParserRuleContext {
    DOT(): TerminalNode;
    ambiguousIdentifier(): AmbiguousIdentifierContext;
    implicitCallStmt_InStmt(): ImplicitCallStmt_InStmtContext | undefined;
    typeHint(): TypeHintContext | undefined;
    WS(): TerminalNode | undefined;
    argsCall(): ArgsCallContext | undefined;
    dictionaryCallStmt(): DictionaryCallStmtContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class ImplicitCallStmt_InStmtContext extends ParserRuleContext {
    iCS_S_MembersCall(): ICS_S_MembersCallContext | undefined;
    iCS_S_VariableOrProcedureCall(): ICS_S_VariableOrProcedureCallContext | undefined;
    iCS_S_ProcedureOrArrayCall(): ICS_S_ProcedureOrArrayCallContext | undefined;
    iCS_S_DictionaryCall(): ICS_S_DictionaryCallContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class ICS_S_VariableOrProcedureCallContext extends ParserRuleContext {
    ambiguousIdentifier(): AmbiguousIdentifierContext;
    typeHint(): TypeHintContext | undefined;
    dictionaryCallStmt(): DictionaryCallStmtContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class ICS_S_ProcedureOrArrayCallContext extends ParserRuleContext {
    ambiguousIdentifier(): AmbiguousIdentifierContext | undefined;
    baseType(): BaseTypeContext | undefined;
    iCS_S_NestedProcedureCall(): ICS_S_NestedProcedureCallContext | undefined;
    typeHint(): TypeHintContext | undefined;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    LPAREN(): TerminalNode[];
    LPAREN(i: number): TerminalNode;
    RPAREN(): TerminalNode[];
    RPAREN(i: number): TerminalNode;
    dictionaryCallStmt(): DictionaryCallStmtContext | undefined;
    argsCall(): ArgsCallContext[];
    argsCall(i: number): ArgsCallContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class ICS_S_NestedProcedureCallContext extends ParserRuleContext {
    ambiguousIdentifier(): AmbiguousIdentifierContext;
    LPAREN(): TerminalNode;
    RPAREN(): TerminalNode;
    typeHint(): TypeHintContext | undefined;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    argsCall(): ArgsCallContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class ICS_S_MembersCallContext extends ParserRuleContext {
    iCS_S_VariableOrProcedureCall(): ICS_S_VariableOrProcedureCallContext | undefined;
    iCS_S_ProcedureOrArrayCall(): ICS_S_ProcedureOrArrayCallContext | undefined;
    iCS_S_MemberCall(): ICS_S_MemberCallContext[];
    iCS_S_MemberCall(i: number): ICS_S_MemberCallContext;
    dictionaryCallStmt(): DictionaryCallStmtContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class ICS_S_MemberCallContext extends ParserRuleContext {
    DOT(): TerminalNode;
    iCS_S_VariableOrProcedureCall(): ICS_S_VariableOrProcedureCallContext | undefined;
    iCS_S_ProcedureOrArrayCall(): ICS_S_ProcedureOrArrayCallContext | undefined;
    WS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class ICS_S_DictionaryCallContext extends ParserRuleContext {
    dictionaryCallStmt(): DictionaryCallStmtContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class ArgsCallContext extends ParserRuleContext {
    argCall(): ArgCallContext[];
    argCall(i: number): ArgCallContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    SEMICOLON(): TerminalNode[];
    SEMICOLON(i: number): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class ArgCallContext extends ParserRuleContext {
    valueStmt(): ValueStmtContext;
    WS(): TerminalNode | undefined;
    BYVAL(): TerminalNode | undefined;
    BYREF(): TerminalNode | undefined;
    PARAMARRAY(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class DictionaryCallStmtContext extends ParserRuleContext {
    EXCLAMATIONMARK(): TerminalNode;
    ambiguousIdentifier(): AmbiguousIdentifierContext;
    typeHint(): TypeHintContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class ArgListContext extends ParserRuleContext {
    LPAREN(): TerminalNode;
    RPAREN(): TerminalNode;
    arg(): ArgContext[];
    arg(i: number): ArgContext;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class ArgContext extends ParserRuleContext {
    ambiguousIdentifier(): AmbiguousIdentifierContext;
    OPTIONAL(): TerminalNode | undefined;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    PARAMARRAY(): TerminalNode | undefined;
    typeHint(): TypeHintContext | undefined;
    LPAREN(): TerminalNode | undefined;
    RPAREN(): TerminalNode | undefined;
    asTypeClause(): AsTypeClauseContext | undefined;
    argDefaultValue(): ArgDefaultValueContext | undefined;
    BYVAL(): TerminalNode | undefined;
    BYREF(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class ArgDefaultValueContext extends ParserRuleContext {
    EQ(): TerminalNode;
    valueStmt(): ValueStmtContext;
    WS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class SubscriptsContext extends ParserRuleContext {
    subscript(): SubscriptContext[];
    subscript(i: number): SubscriptContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class SubscriptContext extends ParserRuleContext {
    valueStmt(): ValueStmtContext[];
    valueStmt(i: number): ValueStmtContext;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    TO(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class AmbiguousIdentifierContext extends ParserRuleContext {
    IDENTIFIER(): TerminalNode[];
    IDENTIFIER(i: number): TerminalNode;
    ambiguousKeyword(): AmbiguousKeywordContext[];
    ambiguousKeyword(i: number): AmbiguousKeywordContext;
    L_SQUARE_BRACKET(): TerminalNode | undefined;
    R_SQUARE_BRACKET(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class AsTypeClauseContext extends ParserRuleContext {
    AS(): TerminalNode;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    type(): TypeContext;
    NEW(): TerminalNode | undefined;
    fieldLength(): FieldLengthContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class BaseTypeContext extends ParserRuleContext {
    BOOLEAN(): TerminalNode | undefined;
    BYTE(): TerminalNode | undefined;
    COLLECTION(): TerminalNode | undefined;
    DATE(): TerminalNode | undefined;
    DOUBLE(): TerminalNode | undefined;
    INTEGER(): TerminalNode | undefined;
    LONG(): TerminalNode | undefined;
    OBJECT(): TerminalNode | undefined;
    SINGLE(): TerminalNode | undefined;
    STRING(): TerminalNode | undefined;
    VARIANT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class CertainIdentifierContext extends ParserRuleContext {
    IDENTIFIER(): TerminalNode[];
    IDENTIFIER(i: number): TerminalNode;
    ambiguousKeyword(): AmbiguousKeywordContext[];
    ambiguousKeyword(i: number): AmbiguousKeywordContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class ComparisonOperatorContext extends ParserRuleContext {
    LT(): TerminalNode | undefined;
    LEQ(): TerminalNode | undefined;
    GT(): TerminalNode | undefined;
    GEQ(): TerminalNode | undefined;
    EQ(): TerminalNode | undefined;
    NEQ(): TerminalNode | undefined;
    IS(): TerminalNode | undefined;
    LIKE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class ComplexTypeContext extends ParserRuleContext {
    ambiguousIdentifier(): AmbiguousIdentifierContext[];
    ambiguousIdentifier(i: number): AmbiguousIdentifierContext;
    DOT(): TerminalNode[];
    DOT(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class FieldLengthContext extends ParserRuleContext {
    MULT(): TerminalNode;
    INTEGERLITERAL(): TerminalNode | undefined;
    ambiguousIdentifier(): AmbiguousIdentifierContext | undefined;
    WS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class LetterrangeContext extends ParserRuleContext {
    certainIdentifier(): CertainIdentifierContext[];
    certainIdentifier(i: number): CertainIdentifierContext;
    MINUS(): TerminalNode | undefined;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class LineLabelContext extends ParserRuleContext {
    ambiguousIdentifier(): AmbiguousIdentifierContext;
    COLON(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class LiteralContext extends ParserRuleContext {
    COLORLITERAL(): TerminalNode | undefined;
    DATELITERAL(): TerminalNode | undefined;
    DOUBLELITERAL(): TerminalNode | undefined;
    FILENUMBER(): TerminalNode | undefined;
    INTEGERLITERAL(): TerminalNode | undefined;
    OCTALLITERAL(): TerminalNode | undefined;
    STRINGLITERAL(): TerminalNode | undefined;
    TRUE(): TerminalNode | undefined;
    FALSE(): TerminalNode | undefined;
    NOTHING(): TerminalNode | undefined;
    NULL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class PublicPrivateVisibilityContext extends ParserRuleContext {
    PRIVATE(): TerminalNode | undefined;
    PUBLIC(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class PublicPrivateGlobalVisibilityContext extends ParserRuleContext {
    PRIVATE(): TerminalNode | undefined;
    PUBLIC(): TerminalNode | undefined;
    GLOBAL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class TypeContext extends ParserRuleContext {
    baseType(): BaseTypeContext | undefined;
    complexType(): ComplexTypeContext | undefined;
    LPAREN(): TerminalNode | undefined;
    RPAREN(): TerminalNode | undefined;
    WS(): TerminalNode[];
    WS(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class TypeHintContext extends ParserRuleContext {
    AMPERSAND(): TerminalNode | undefined;
    AT(): TerminalNode | undefined;
    DOLLAR(): TerminalNode | undefined;
    EXCLAMATIONMARK(): TerminalNode | undefined;
    HASH(): TerminalNode | undefined;
    PERCENT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class VisibilityContext extends ParserRuleContext {
    PRIVATE(): TerminalNode | undefined;
    PUBLIC(): TerminalNode | undefined;
    FRIEND(): TerminalNode | undefined;
    GLOBAL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
export declare class AmbiguousKeywordContext extends ParserRuleContext {
    ACCESS(): TerminalNode | undefined;
    ADDRESSOF(): TerminalNode | undefined;
    ALIAS(): TerminalNode | undefined;
    AND(): TerminalNode | undefined;
    ATTRIBUTE(): TerminalNode | undefined;
    APPACTIVATE(): TerminalNode | undefined;
    APPEND(): TerminalNode | undefined;
    AS(): TerminalNode | undefined;
    BEEP(): TerminalNode | undefined;
    BEGIN(): TerminalNode | undefined;
    BINARY(): TerminalNode | undefined;
    BOOLEAN(): TerminalNode | undefined;
    BYVAL(): TerminalNode | undefined;
    BYREF(): TerminalNode | undefined;
    BYTE(): TerminalNode | undefined;
    CALL(): TerminalNode | undefined;
    CASE(): TerminalNode | undefined;
    CLASS(): TerminalNode | undefined;
    CLOSE(): TerminalNode | undefined;
    CHDIR(): TerminalNode | undefined;
    CHDRIVE(): TerminalNode | undefined;
    COLLECTION(): TerminalNode | undefined;
    CONST(): TerminalNode | undefined;
    DATE(): TerminalNode | undefined;
    DECLARE(): TerminalNode | undefined;
    DEFBOOL(): TerminalNode | undefined;
    DEFBYTE(): TerminalNode | undefined;
    DEFCUR(): TerminalNode | undefined;
    DEFDBL(): TerminalNode | undefined;
    DEFDATE(): TerminalNode | undefined;
    DEFDEC(): TerminalNode | undefined;
    DEFINT(): TerminalNode | undefined;
    DEFLNG(): TerminalNode | undefined;
    DEFOBJ(): TerminalNode | undefined;
    DEFSNG(): TerminalNode | undefined;
    DEFSTR(): TerminalNode | undefined;
    DEFVAR(): TerminalNode | undefined;
    DELETESETTING(): TerminalNode | undefined;
    DIM(): TerminalNode | undefined;
    DO(): TerminalNode | undefined;
    DOUBLE(): TerminalNode | undefined;
    EACH(): TerminalNode | undefined;
    ELSE(): TerminalNode | undefined;
    ELSEIF(): TerminalNode | undefined;
    END(): TerminalNode | undefined;
    ENUM(): TerminalNode | undefined;
    EQV(): TerminalNode | undefined;
    ERASE(): TerminalNode | undefined;
    ERROR(): TerminalNode | undefined;
    EVENT(): TerminalNode | undefined;
    FALSE(): TerminalNode | undefined;
    FILECOPY(): TerminalNode | undefined;
    FRIEND(): TerminalNode | undefined;
    FOR(): TerminalNode | undefined;
    FUNCTION(): TerminalNode | undefined;
    GET(): TerminalNode | undefined;
    GLOBAL(): TerminalNode | undefined;
    GOSUB(): TerminalNode | undefined;
    GOTO(): TerminalNode | undefined;
    IF(): TerminalNode | undefined;
    IMP(): TerminalNode | undefined;
    IMPLEMENTS(): TerminalNode | undefined;
    IN(): TerminalNode | undefined;
    INPUT(): TerminalNode | undefined;
    IS(): TerminalNode | undefined;
    INTEGER(): TerminalNode | undefined;
    KILL(): TerminalNode | undefined;
    LOAD(): TerminalNode | undefined;
    LOCK(): TerminalNode | undefined;
    LONG(): TerminalNode | undefined;
    LOOP(): TerminalNode | undefined;
    LEN(): TerminalNode | undefined;
    LET(): TerminalNode | undefined;
    LIB(): TerminalNode | undefined;
    LIKE(): TerminalNode | undefined;
    LSET(): TerminalNode | undefined;
    ME(): TerminalNode | undefined;
    MID(): TerminalNode | undefined;
    MKDIR(): TerminalNode | undefined;
    MOD(): TerminalNode | undefined;
    NAME(): TerminalNode | undefined;
    NEXT(): TerminalNode | undefined;
    NEW(): TerminalNode | undefined;
    NOT(): TerminalNode | undefined;
    NOTHING(): TerminalNode | undefined;
    NULL(): TerminalNode | undefined;
    OBJECT(): TerminalNode | undefined;
    ON(): TerminalNode | undefined;
    OPEN(): TerminalNode | undefined;
    OPTIONAL(): TerminalNode | undefined;
    OR(): TerminalNode | undefined;
    OUTPUT(): TerminalNode | undefined;
    PARAMARRAY(): TerminalNode | undefined;
    PRESERVE(): TerminalNode | undefined;
    PRINT(): TerminalNode | undefined;
    PRIVATE(): TerminalNode | undefined;
    PUBLIC(): TerminalNode | undefined;
    PUT(): TerminalNode | undefined;
    RANDOM(): TerminalNode | undefined;
    RANDOMIZE(): TerminalNode | undefined;
    RAISEEVENT(): TerminalNode | undefined;
    READ(): TerminalNode | undefined;
    REDIM(): TerminalNode | undefined;
    REM(): TerminalNode | undefined;
    RESET(): TerminalNode | undefined;
    RESUME(): TerminalNode | undefined;
    RETURN(): TerminalNode | undefined;
    RMDIR(): TerminalNode | undefined;
    RSET(): TerminalNode | undefined;
    SAVEPICTURE(): TerminalNode | undefined;
    SAVESETTING(): TerminalNode | undefined;
    SEEK(): TerminalNode | undefined;
    SELECT(): TerminalNode | undefined;
    SENDKEYS(): TerminalNode | undefined;
    SET(): TerminalNode | undefined;
    SETATTR(): TerminalNode | undefined;
    SHARED(): TerminalNode | undefined;
    SINGLE(): TerminalNode | undefined;
    SPC(): TerminalNode | undefined;
    STATIC(): TerminalNode | undefined;
    STEP(): TerminalNode | undefined;
    STOP(): TerminalNode | undefined;
    STRING(): TerminalNode | undefined;
    SUB(): TerminalNode | undefined;
    TAB(): TerminalNode | undefined;
    TEXT(): TerminalNode | undefined;
    THEN(): TerminalNode | undefined;
    TIME(): TerminalNode | undefined;
    TO(): TerminalNode | undefined;
    TRUE(): TerminalNode | undefined;
    TYPE(): TerminalNode | undefined;
    TYPEOF(): TerminalNode | undefined;
    UNLOAD(): TerminalNode | undefined;
    UNLOCK(): TerminalNode | undefined;
    UNTIL(): TerminalNode | undefined;
    VARIANT(): TerminalNode | undefined;
    VERSION(): TerminalNode | undefined;
    WEND(): TerminalNode | undefined;
    WHILE(): TerminalNode | undefined;
    WIDTH(): TerminalNode | undefined;
    WITH(): TerminalNode | undefined;
    WITHEVENTS(): TerminalNode | undefined;
    WRITE(): TerminalNode | undefined;
    XOR(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: VisualBasic6Listener): void;
    exitRule(listener: VisualBasic6Listener): void;
    accept<Result>(visitor: VisualBasic6Visitor<Result>): Result;
}
